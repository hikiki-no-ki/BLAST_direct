#!/bin/zsh
##########################################
# Project: Automatically Execution of BLAST
# Date: 2019/12/28
# Author: Yusuke Hiki
##########################################

# --- Initialization --- #
QUERY=0
REFERENCE=0
SETTINGFILE=0
TARGETGENEFILE=0
DEBUGFLAG=0
OUTPUTDIR=.

# --- Error message --- #
ERRORMESSAGE1="USAGE: ./execBLAST -m ['blastn' or 'blastp'] -q [query file path] -r [reference file path] -s [setting file] -o [output directory path] -d [0 or 1]"
ERRORMESSAGE2="USAGE: query and reference must be needed."

# --- information extraction from argument --- #
foreach i (`seq $#`)
## mode (blastp or blastn)
if [ $*[$i] = "-m" ]; then
    if [ `echo $*[$i+1] | cut -c 1-1` != "-" ]; then
        MODE=$*[${i}+1]
    else
        echo " ERROR@ -m option \n" ${ERRORMESSAGE1}
        exit
    fi
## query file path
elif [ $*[$i] = "-q" ]; then
    if [ `echo $*[$i+1] | cut -c 1-1` != "-" ]; then
        QUERY=$*[${i}+1]
    else
        echo " ERROR@ -q  option \n" ${ERRORMASSAGE1}
        exit
    fi
## reference file path
elif [ $*[$i] = "-r" ]; then
    if [ `echo $*[$i+1] | cut -c 1-1` != "-" ]; then
        REFERENCE=$*[${i}+1]
    else
        echo "ERROR@ -r option \n" ${ERRORMASSAGE1}
        exit
    fi
## setting file path
elif [ $*[$i] = "-s" ]; then
    if [ `echo $*[$i+1] | cut -c 1-1` != "-" ]; then
        SETTINGFILE=$*[${i}+1]
    else
        echo "ERROR@ -s option \n" ${ERRORMASSAGE1}
        exit
    fi
## target gene list file path
elif [ $*[$i] = "-t" ]; then
    if [ `echo $*[$i+1] | cut -c 1-1` != "-" ]; then
        TARGETGENEFILE=$*[${i}+1]
    else
        echo "ERROR@ -t option \n" ${ERRORMASSAGE1}
        exit
    fi
## output directory path
elif [ $*[$i] = "-o" ]; then
    if [ `echo $*[$i+1] | cut -c 1-1` != "-" ]; then
        OUTPUTDIR=$*[${i}+1]
    else
        echo "ERROR@ -o option \n" ${ERRORMASSAGE1}
        exit
    fi
## flag for debug mode (0 or 1)
elif [ $*[$i] = "-d" ]; then
    if [ `echo $*[$i+1] | cut -c 1-1` != "-" ]; then
        DEBUGFLAG=$*[${i}+1]
    else
        echo "ERROR@ -d option \n" ${ERRORMASSAGE1}
        exit
    fi
fi
end

## exception for no query or no reference
if [ $QUERY = 0 -o $REFERENCE = 0 ]; then
    echo "ERROR@ -q or -r option \n" ${ERRORMASSAGE2}
    exit
fi

## set debug mode
if [ $DEBUGFLAG = 0 ]; then
    DEBUGMODE=FALSE
else
    DEBUGMODE=TRUE
fi

# --- show paramter --- #
echo "\n"
echo "================================================"
echo Mode: $MODE
echo Query: $QUERY
echo Reference: $REFERENCE
echo Setting file: $SETTINGFILE
echo Target gene file: $TARGETGENEFILE
echo Output directory: $OUTPUTDIR
echo Debug mode: $DEBUGMODE
echo "================================================"
echo "\n"

# --- execution --- #
echo Make BLAST DataBase......
\Rscript --vanilla --slave ./MakeExecMakeBlastDBCode.R $MODE $REFERENCE
zsh ./makeblastdb.sh
echo Done.

echo Make Command for BLAST......
\Rscript --vanilla --slave ./ExtractSeqofFocusedGene.R $QUERY $TARGETGENEFILE $OUTPUTDIR
TARGETSEQFILE=$OUTPUTDIR/SequenceofFocusedGene.fasta
\Rscript --vanilla --slave ./MakeExecBlastCode.R $MODE $TARGETSEQFILE $REFERENCE $SETTINGFILE
echo Done.

if [ ! -e $OUTPUTDIR ]; then
    echo Make Output Directory......
    mkdir $OUTPUTDIR
    echo Done.
fi

echo BLASTing.......
zsh ./blast.sh > $OUTPUTDIR/BLAST_Result.txt
echo Done.

echo Cleaning.......
if [ $DEBUGMODE = "FALSE" ]; then
    rm ./makeblastdb.sh
    rm ./blast.sh
fi
rm makeblast_log.txt
rm ${REFERENCE}.???
echo Done.

echo Completed.
